#include "Geometry.h"

//Решение
//Суть решения заключается в следующем:
//
//1. Отрезки могут иметь общий конец, тогда расстояние =0
//2. Отрезки могут быть параллельны, тогда расстояние между ними будет либо перпендикуляр между отрезками,
//либо минимальное расстояние от одного из концов до другого конца
//
//3. Отрезки могут принадлежать скрещивающимся прямым. Тогда:
//По теореме через каждую из двух скрещивающихся прямых проходит плоскость,
//параллельная другой прямой, и притом только одна.
//
//	3.1. Составляем два вектора, которые являются направляющими для отрезков.
//	3.2. Находим векторное произведение.
//	Если это 0, то отрезки параллельны, находим по п2.
//	Если не 0, то полученный вектор будет общим перпендикуляром для двух этих отрезков.
//	3.3 Составляем уравнение плоскости по любой из точек и перпендикуляру.
//	3.4 Находим расстояние до любой точки другого отрезка, это и будет являться расстоянием между плоскостями.
//	3.5 Проецируем другой отрезок на эту плоскость.
//	3.6. Теперь спроецированный отрезок и другой отрезок лежат в одной плоскости.
//	Смотрим, пересекаются они или нет.
//	3.7 Пересечение определим следующим образом:
//
//		Если отрезки пересекаются, то относительного каждого отрезка концы другого
//		отрезка должны лежать по разную сторону.
//		Это мы отпределим через векторное произведение, проанализировав знак его проекции
//		на вектор нормали текущей плоскости 
//
//	3.8 Если отрезки пересекаются, то минимальное расстояние - найденное ранее расстояние между скрещивающимися прямыми
//	3.9. Если не пересекаются, то найдем минимальное расстояние как наименьшее расстояние от каждого из концов одного отрезка до 
//	другого отрезка
// 
// 
// Если исходные концы отрезка будут совпадать, программа вернет -1
//


// Пользовательский ввод координат точек
//-------------------------------------------------------------------------
void user_input(double& x, double& y, double& z)
{
	static int i = 1;
	std::cout << "Enter " << i++ << " point: " << std::endl;
	std::cin >> x >> y >> z;
}
// Вывод результата
//-------------------------------------------------------------------------
void user_output(double dist)
{
	std::cout << "Minimal distance " << dist << std::endl;
}
//-------------------------------------------------------------------------


int main()
{
	// Получили все координаты точек 
	double x, y, z;

	user_input(x, y, z); const _P3D p1(x, y, z);
	user_input(x, y, z); const _P3D p2(x, y, z);
	user_input(x, y, z); const _P3D p3(x, y, z);
	user_input(x, y, z); const _P3D p4(x, y, z);

	//const _P3D p1(x, y, z);
	//const _P3D p2(x, y, z);
	//const _P3D p3(x, y, z);
	//const _P3D p4(x, y, z);


	const double dist = BaseGeom::calculateMinDistance(p1, p2, p3, p4);
	user_output(dist);

	return 0;
}
